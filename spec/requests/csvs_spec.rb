require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/csvs', type: :request do
  context 'when signed in as a user' do
    let!(:user) { FactoryBot.create(:user) }
    before(:each) do
      sign_in user
    end
    # Csc. As you add validations to Csv, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) do
      { file_name: Faker::File.file_name,
        url: Faker::Internet.url,
        user_id: user.id }
    end

    let(:invalid_attributes) do
      { file_name: nil,
        url: nil,
        user_id: nil }
    end

    describe 'GET /index' do
      it 'renders a successful response' do
        Csv.create! valid_attributes
        get csvs_url
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_csv_url
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      xcontext 'with valid parameters' do
        it 'creates a new Csv' do
          expect do
            post csvs_path, params: { csv: valid_attributes }
          end.to change(Csv, :count).by(1)
        end

        it 'redirects to the created csv' do
          post csvs_path, params: { csv: valid_attributes }
          expect(response).to redirect_to(csv_books_url(csv))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new Csv' do
          expect do
            post csvs_url, params: { csv: invalid_attributes }
          end.to change(Csv, :count).by(0)
        end
      end
    end
  end
end
